What is a Callback in JavaScript?
A callback function is a function passed as an argument 
to another function. The function receiving the callback can execute it later.

Why Use Callbacks?
Asynchronous Operations: Callbacks are 
commonly used in asynchronous JavaScript (e.g., handling API requests, reading files, or timers).
Event Handling: Used in DOM event listeners.
Code Reusability: Allows passing different functions dynamically.

JavaScript Promises with .then()
A Promise in JavaScript is used to 
handle asynchronous operations. It represents 
a value that might be available now, in the future, or never.

Promise States
Pending ‚Üí Initial state (waiting for result)
Fulfilled ‚Üí Operation completed successfully
Rejected ‚Üí Operation failed

Using .then()
.then() is used to handle the fulfilled state of a Promise.

Handling Errors with .catch()
If a Promise rejects, we handle it using .catch():

The .finally() 
block always runs whether the Promise is resolved or rejected:


JavaScript async & await ‚Äì The Modern Way to Handle Promises üöÄ
async and await make working with Promises easier 
and more readable by removing .then() chains and 
allowing you to write asynchronous code in a synchronous style.

1Ô∏è‚É£ Basic Syntax
async ‚Üí Declares a function that returns a Promise.
await ‚Üí Waits for the Promise to resolve (can only be used inside an async function).